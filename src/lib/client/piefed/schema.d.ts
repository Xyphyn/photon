/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/alpha/site': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the site, and your user data. */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetSiteResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/site/version': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets version of PieFed. */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetSiteVersionResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/site/block': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Block an instance. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['BlockInstanceRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BlockInstanceResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/site/instance_chooser': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the site info for use by other instances in the Instance Chooser functionality. */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetSiteInstanceChooserResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/site/instance_chooser_search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Search for other instances. */
    get: {
      parameters: {
        query?: {
          q?: string
          nsfw?: string
          language?: string
          newbie?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetSiteInstanceChooserSearchResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Search PieFed. */
    get: {
      parameters: {
        query: {
          q: string
          type_: 'Communities' | 'Posts' | 'Users' | 'Url'
          limit?: number
          listing_type?:
            | 'All'
            | 'Local'
            | 'Subscribed'
            | 'Popular'
            | 'Moderating'
          page?: number
          sort?:
            | 'Active'
            | 'Hot'
            | 'New'
            | 'TopHour'
            | 'TopSixHour'
            | 'TopTwelveHour'
            | 'TopDay'
            | 'TopWeek'
            | 'TopMonth'
            | 'TopThreeMonths'
            | 'TopSixMonths'
            | 'TopNineMonths'
            | 'TopYear'
            | 'TopAll'
            | 'Scaled'
          community_name?: string
          community_id?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['SearchResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/resolve_object': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Fetch a non-local / federated object. */
    get: {
      parameters: {
        query: {
          q: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ResolveObjectResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/federated_instances': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Fetch federated instances. */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetFederatedInstancesResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/community': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get / fetch a community. */
    get: {
      parameters: {
        query?: {
          id?: number
          name?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetCommunityResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    /** Edit community. */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['EditCommunityRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CommunityResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    /** Create a new community. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateCommunityRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CommunityResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
        /** @description Too Many Requests */
        429: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/community/list': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List communities, with various filters. */
    get: {
      parameters: {
        query?: {
          limit?: number
          page?: number
          show_nsfw?: boolean
          sort?: 'Hot' | 'Top' | 'New'
          type_?: 'All' | 'Local' | 'Subscribed'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ListCommunitiesResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/community/follow': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Follow / subscribe to a community. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['FollowCommunityRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CommunityResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/community/block': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Block a community. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['BlockCommunityRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BlockCommunityResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/community/subscribe': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Subscribe to activities in a community. */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['SubscribeCommunityRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CommunityResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/community/delete': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Delete a community. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['DeleteCommunityRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CommunityResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/community/mod': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Add or remove a moderator for your community. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['ModCommunityRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ModCommunityResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/community/moderate/bans': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get the list of banned users for a community. */
    get: {
      parameters: {
        query: {
          community_id: number
          limit?: number
          page?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CommunityModerationBansListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/community/moderate/unban': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Unban a user from a community. */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CommunityModerationUnbanRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CommunityModerationBanItem']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/community/moderate/ban': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Ban a user from a community. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CommunityModerationBanRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CommunityModerationBanItem']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/community/moderate/post/nsfw': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Mark or unmark a post as NSFW. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CommunityModerationNsfwRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['PostView']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/community/flair': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Edit an existing post flair in the community */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CommunityFlairEditRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CommunityFlairEditResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    /** Create a new post flair in the community */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CommunityFlairCreateRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CommunityFlairCreateResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/community/flair/delete': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Delete a post flair in a community */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CommunityFlairDeleteRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CommunityFlairDeleteResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/feed/list': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get list of feeds */
    get: {
      parameters: {
        query?: {
          /** @description include list of communities in each feed with result */
          include_communities?: boolean
          /** @description only return feeds created by the authorized user */
          mine_only?: boolean
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['FeedListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/topic/list': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get list of topics */
    get: {
      parameters: {
        query?: {
          /** @description include list of communities in each topic with result */
          include_communities?: boolean
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['TopicListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/user': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get the details for a person */
    get: {
      parameters: {
        query?: {
          /** @description One of either person_id or username must be specified */
          person_id?: number
          /** @description One of either person_id or username must be specified */
          username?: string
          sort?:
            | 'Active'
            | 'Hot'
            | 'New'
            | 'TopHour'
            | 'TopSixHour'
            | 'TopTwelveHour'
            | 'TopDay'
            | 'TopWeek'
            | 'TopMonth'
            | 'TopThreeMonths'
            | 'TopSixMonths'
            | 'TopNineMonths'
            | 'TopYear'
            | 'TopAll'
            | 'Scaled'
          page?: number
          limit?: number
          /** @description Limit posts/comments to just a single community */
          community_id?: number
          saved_only?: boolean
          include_content?: boolean
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetUserResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/user/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Log into PieFed */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UserLoginRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UserLoginResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
        /** @description Too Many Requests */
        429: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/user/unread_count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get your unread counts */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UserUnreadCountsResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/user/replies': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get comment replies */
    get: {
      parameters: {
        query?: {
          limit?: number
          page?: number
          sort?: 'Hot' | 'Top' | 'New' | 'Old'
          unread_only?: boolean
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UserRepliesResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/user/mentions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get mentions of your account made in comments */
    get: {
      parameters: {
        query?: {
          limit?: number
          page?: number
          sort?: 'Hot' | 'Top' | 'New' | 'Old'
          unread_only?: boolean
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UserMentionsResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/user/block': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Block or unblock a person */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UserBlockRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UserBlockResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/user/mark_all_as_read': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Mark all notifications and messages as read */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UserMarkAllReadResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/user/subscribe': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Subscribe or unsubscribe to activites of another user */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UserSubscribeRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UserSubscribeResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/user/save_user_settings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Save your user settings */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UserSaveSettingsRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UserSaveSettingsResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/user/notifications': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get your user notifications (not all notification types supported yet) */
    get: {
      parameters: {
        query: {
          status: 'All' | 'Unread' | 'Read'
          limit?: number
          page?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UserNotificationsResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/user/notification_state': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Set the read status of a given notification (not all notification types supported yet) */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UserNotificationStateRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UserNotificationItemView']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/user/notifications_count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get user unread notifications count */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UserNotificationsCountResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/user/mark_all_notifications_read': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Mark all notifications as read */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UserMarkAllNotifsReadResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/user/verify_credentials': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Verify username/password credentials */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UserLoginRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/user/set_flair': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Set your flair for a community */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UserSetFlairRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UserSetFlairResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/comment/list': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List comments, with various filters. */
    get: {
      parameters: {
        query?: {
          limit?: number
          page?: number
          sort?: 'Hot' | 'Top' | 'New' | 'Old'
          liked_only?: boolean
          saved_only?: boolean
          person_id?: number
          community_id?: number
          post_id?: number
          parent_id?: number
          max_depth?: number
          /** @description guarantee parent comments are on the same page as any fetched comments */
          depth_first?: boolean
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ListCommentsResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/comment/like': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Like / vote on a comment. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['LikeCommentRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetCommentResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/comment/save': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Save a comment. */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['SaveCommentRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetCommentResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/comment/subscribe': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Subscribe to a comment. */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['SubscribeCommentRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetCommentResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/comment': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get / fetch a comment. */
    get: {
      parameters: {
        query: {
          id: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetCommentResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    /** Edit a comment. */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['EditCommentRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetCommentResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    /** Create a comment. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateCommentRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetCommentResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
        /** @description Too Many Requests */
        429: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/comment/delete': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Delete a comment. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['DeleteCommentRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetCommentResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/comment/report': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Report a comment. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['ReportCommentRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetCommentReportResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/comment/remove': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Remove a comment as a moderator. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['RemoveCommentRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetCommentResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/comment/mark_as_read': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Mark a comment reply as read. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['MarkCommentAsReadRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetCommentReplyResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/comment/lock': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Lock a comment chain as a moderator. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['LockCommentRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetCommentResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/comment/like/list': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** View comment votes as a moderator. */
    get: {
      parameters: {
        query: {
          comment_id: number
          page?: number
          limit?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ListCommentLikesResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/post/list': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List posts. */
    get: {
      parameters: {
        query?: {
          q?: string
          sort?:
            | 'Hot'
            | 'Top'
            | 'TopHour'
            | 'TopSixHour'
            | 'TopTwelveHour'
            | 'TopWeek'
            | 'TopMonth'
            | 'TopThreeMonths'
            | 'TopSixMonths'
            | 'TopNineMonths'
            | 'TopYear'
            | 'TopAll'
            | 'New'
            | 'Scaled'
            | 'Active'
          type_?: 'All' | 'Local' | 'Subscribed'
          community_name?: string
          community_id?: number
          saved_only?: boolean
          person_id?: number
          limit?: number
          page?: number
          liked_only?: boolean
          feed_id?: number
          topic_id?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ListPostsResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/post': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get/fetch a post */
    get: {
      parameters: {
        query: {
          id: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetPostResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    /** Edit a post. */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['EditPostRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetPostResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    /** Create a new post. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CreatePostRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetPostResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
        /** @description Too Many Requests */
        429: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/post/replies': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get replies/comments for a post with nested structure. */
    get: {
      parameters: {
        query?: {
          post_id?: number
          parent_id?: number
          sort?: 'Hot' | 'Top' | 'New' | 'Old'
          max_depth?: number
          page?: string
          limit?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetPostRepliesResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/post/like': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Like or unlike a post. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['LikePostRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetPostResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/post/save': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Save or unsave a post. */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['SavePostRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetPostResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/post/subscribe': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Subscribe or unsubscribe to a post. */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['SubscribePostRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetPostResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/post/delete': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Delete or restore a post. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['DeletePostRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetPostResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/post/report': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Report a post. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['ReportPostRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['PostReportResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/post/lock': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Lock or unlock a post. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['LockPostRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetPostResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/post/feature': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Feature or unfeature a post. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['FeaturePostRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetPostResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/post/remove': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Remove or restore a post as a moderator. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['RemovePostRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GetPostResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/post/mark_as_read': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Mark one or more posts as read or unread. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['MarkPostAsReadRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['SuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/post/like/list': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** View post votes as a moderator. */
    get: {
      parameters: {
        query: {
          post_id: number
          page?: number
          limit?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ListPostLikesResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/post/assign_flair': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Add/remove flair from a post */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['PostSetFlairRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['PostSetFlairResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/upload/image': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Upload a general image. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'multipart/form-data': components['schemas']['ImageUploadRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ImageUploadResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
        /** @description Too Many Requests */
        429: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/upload/community_image': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Upload a community image. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'multipart/form-data': components['schemas']['ImageUploadRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ImageUploadResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
        /** @description Too Many Requests */
        429: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/alpha/upload/user_image': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Upload a user image. */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'multipart/form-data': components['schemas']['ImageUploadRequest']
        }
      }
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ImageUploadResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
        422: components['responses']['UNPROCESSABLE_CONTENT']
        /** @description Too Many Requests */
        429: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DefaultError']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    Error: {
      /** @description Error code */
      code?: number
      /** @description Error name */
      status?: string
      /** @description Error message */
      message?: string
      /** @description Errors */
      errors?: {
        [key: string]: unknown
      }
    }
    PaginationMetadata: {
      total?: number
      total_pages?: number
      first_page?: number
      last_page?: number
      page?: number
      previous_page?: number
      next_page?: number
    }
    DefaultError: {
      message?: string
    }
    PersonAggregates: {
      comment_count: number
      person_id: number
      post_count: number
    }
    Person: {
      /**
       * Format: url
       * @example https://piefed.social/u/rimu
       */
      actor_id: string
      banned: boolean
      bot: boolean
      deleted: boolean
      id: number
      instance_id: number
      local: boolean
      user_name: string
      /** Format: markdown */
      about?: string
      /** Format: html */
      about_html?: string
      /** Format: url */
      avatar?: string
      /** Format: url */
      banner?: string
      flair?: string
      published: string
      title?: string
    }
    PersonView: {
      activity_alert: boolean
      counts: components['schemas']['PersonAggregates']
      is_admin: boolean
      person: components['schemas']['Person']
    }
    LanguageView: {
      /** @example en */
      code?: string
      /** @example 2 */
      id?: number
      /** @example English */
      name?: string
    }
    Site: {
      /**
       * Format: url
       * @example https://piefed.social
       */
      actor_id: string
      name: string
      all_languages?: components['schemas']['LanguageView'][]
      description?: string
      enable_downvotes?: boolean
      /** Format: url */
      icon?: string
      /** @enum {string} */
      registration_mode?: 'Closed' | 'RequireApplication' | 'Open'
      /** Format: html */
      sidebar?: string
      /** Format: markdown */
      sidebar_md?: string
      user_count?: number
    }
    Community: {
      /**
       * Format: url
       * @example https://piefed.social/c/piefed_meta
       */
      actor_id: string
      /** @example piefed.social */
      ap_domain?: string
      deleted: boolean
      hidden: boolean
      id: number
      instance_id: number
      local: boolean
      name: string
      nsfw: boolean
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      published: string
      removed: boolean
      restricted_to_mods: boolean
      title: string
      banned?: boolean
      /** Format: url */
      banner?: string
      /** Format: markdown */
      description?: string
      /** Format: url */
      icon?: string
      posting_warning?: string
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      updated?: string
    }
    CommunityBlockView: {
      community: components['schemas']['Community']
      person: components['schemas']['Person']
    }
    CommunityFollowerView: {
      community: components['schemas']['Community']
      follower: components['schemas']['Person']
    }
    Instance: {
      /** @example piefed.social */
      domain: string
      id: number
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      published: string
      software?: string
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      updated?: string
      version?: string
    }
    InstanceBlockView: {
      instance: components['schemas']['Instance']
      person: components['schemas']['Person']
    }
    LocalUser: {
      /** @enum {string} */
      default_comment_sort_type: 'Hot' | 'Top' | 'New' | 'Old'
      /** @enum {string} */
      default_listing_type:
        | 'All'
        | 'Local'
        | 'Subscribed'
        | 'Popular'
        | 'Moderating'
      /** @enum {string} */
      default_sort_type:
        | 'Active'
        | 'Hot'
        | 'New'
        | 'TopHour'
        | 'TopSixHour'
        | 'TopTwelveHour'
        | 'TopDay'
        | 'TopWeek'
        | 'TopMonth'
        | 'TopThreeMonths'
        | 'TopSixMonths'
        | 'TopNineMonths'
        | 'TopYear'
        | 'TopAll'
        | 'Scaled'
      show_bot_accounts: boolean
      show_nsfl: boolean
      show_nsfw: boolean
      show_read_posts: boolean
      show_scores: boolean
    }
    LocalUserView: {
      counts: components['schemas']['PersonAggregates']
      local_user: components['schemas']['LocalUser']
      person: components['schemas']['Person']
    }
    CommunityModeratorView: {
      community: components['schemas']['Community']
      moderator: components['schemas']['Person']
    }
    PersonBlockView: {
      person: components['schemas']['Person']
      target: components['schemas']['Person']
    }
    MyUserInfo: {
      community_blocks: components['schemas']['CommunityBlockView'][]
      discussion_languages: components['schemas']['LanguageView'][]
      follows: components['schemas']['CommunityFollowerView'][]
      instance_blocks: components['schemas']['InstanceBlockView'][]
      local_user_view: components['schemas']['LocalUserView']
      moderates: components['schemas']['CommunityModeratorView'][]
      person_blocks: components['schemas']['PersonBlockView'][]
    }
    GetSiteResponse: {
      admins: components['schemas']['PersonView'][]
      site: components['schemas']['Site']
      /** Software version */
      version: string
      my_user?: components['schemas']['MyUserInfo']
    }
    GetSiteVersionResponse: {
      version: string
    }
    BlockInstanceRequest: {
      block: boolean
      instance_id: number
    }
    BlockInstanceResponse: {
      blocked: boolean
    }
    GetSiteInstanceChooserResponse: {
      language: components['schemas']['LanguageView']
      nsfw: boolean
      newbie_friendly: boolean
      name: string
      elevator_pitch: string
      description: string
      about: string
      sidebar: string
      logo_url: string
      maturity: string
      tos_url: string
      mau: number
      can_make_communities: boolean
      defederation: string[]
      trusts: string[]
      registration_mode: string
    }
    GetSiteInstanceChooserSearchResponseItem: {
      id: number
      name: string
      domain: string
      elevator_pitch: string
      description: string
      about: string
      sidebar: string
      logo_url: string
      maturity: string
      tos_url: string
      uptime: string
      mau: number
      can_make_communities: boolean
      newbie_friendly: boolean
      defederation: string[]
      trusts: string[]
      registration_mode: string
      language: string
      monthsmonitored: number
    }
    GetSiteInstanceChooserSearchResponse: {
      result: components['schemas']['GetSiteInstanceChooserSearchResponseItem'][]
    }
    CommunityAggregates: {
      id: number
      post_count: number
      post_reply_count: number
      published: string
      subscriptions_count: number
      total_subscriptions_count: number
      active_daily?: number
      active_weekly?: number
      active_monthly?: number
      active_6monthly?: number
    }
    CommunityFlair: {
      id: number
      community_id: number
      flair_title: string
      /**
       * @description Hex color code for the text of the flair
       * @example #000000
       */
      text_color: string
      /**
       * @description Hex color code for the background of the flair
       * @example #DEDDDA
       */
      background_color: string
      blur_images: boolean
      /**
       * Format: url
       * @description Legacy tags that existed prior to 1.2 and some tags for remote communities might not have a defined ap_id
       */
      ap_id: string
    }
    CommunityView: {
      activity_alert: boolean
      blocked: boolean
      community: components['schemas']['Community']
      counts: components['schemas']['CommunityAggregates']
      /** @enum {string} */
      subscribed: 'Subscribed' | 'NotSubscribed' | 'Pending'
      flair_list?: components['schemas']['CommunityFlair'][]
    }
    PostAggregates: {
      comments: number
      downvotes: number
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      newest_comment_time: string
      post_id: number
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      published: string
      score: number
      upvotes: number
    }
    Post: {
      /** Format: url */
      ap_id: string
      community_id: number
      deleted: boolean
      id: number
      language_id: number
      local: boolean
      locked: boolean
      nsfw: boolean
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      published: string
      removed: boolean
      sticky: boolean
      title: string
      user_id: number
      alt_text?: string
      /** Format: markdown */
      body?: string
      /** Format: url */
      small_thumbnail_url?: string
      /** Format: url */
      thumbnail_url?: string
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      updated?: string
      /** Format: url */
      url?: string
    }
    PostView: {
      banned_from_community: boolean
      community: components['schemas']['Community']
      counts: components['schemas']['PostAggregates']
      creator: components['schemas']['Person']
      creator_banned_from_community: boolean
      creator_is_admin: boolean
      creator_is_moderator: boolean
      hidden: boolean
      post: components['schemas']['Post']
      read: boolean
      saved: boolean
      /** @enum {string} */
      subscribed: 'Subscribed' | 'NotSubscribed' | 'Pending'
      unread_comments: number
      activity_alert?: boolean
      my_vote?: number
      flair_list?: components['schemas']['CommunityFlair'][]
    }
    Comment: {
      /** Format: url */
      ap_id: string
      /** Format: markdown */
      body: string
      deleted: boolean
      id: number
      language_id: number
      local: boolean
      path: string
      post_id: number
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      published: string
      removed: boolean
      user_id: number
      distinguished?: boolean
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      updated?: string
      locked?: boolean
    }
    CommentAggregates: {
      child_count: number
      comment_id: number
      downvotes: number
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      published: string
      score: number
      upvotes: number
    }
    CommentView: {
      activity_alert: boolean
      banned_from_community: boolean
      comment: components['schemas']['Comment']
      community: components['schemas']['Community']
      counts: components['schemas']['CommentAggregates']
      creator: components['schemas']['Person']
      creator_banned_from_community: boolean
      creator_blocked: boolean
      creator_is_admin: boolean
      creator_is_moderator: boolean
      post: components['schemas']['Post']
      saved: boolean
      subscribed: string
      my_vote?: number
      can_auth_user_moderate?: boolean
    }
    SearchResponse: {
      /** @enum {string} */
      type_: 'Communities' | 'Posts' | 'Users' | 'Url'
      communities: components['schemas']['CommunityView'][]
      posts: components['schemas']['PostView'][]
      users: components['schemas']['PersonView'][]
      comments: components['schemas']['CommentView'][]
    }
    ResolveObjectResponse: {
      comment?: components['schemas']['CommentView']
      post?: components['schemas']['PostView']
      community?: components['schemas']['CommunityView']
      person?: components['schemas']['PersonView']
    }
    InstanceWithoutFederationState: {
      domain: string
      id: number
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      published: string
      software?: string
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      updated?: string
      version?: string
    }
    FederatedInstancesView: {
      allowed: components['schemas']['InstanceWithoutFederationState'][]
      blocked: components['schemas']['InstanceWithoutFederationState'][]
      linked: components['schemas']['InstanceWithoutFederationState'][]
    }
    GetFederatedInstancesResponse: {
      federated_instances?: components['schemas']['FederatedInstancesView']
    }
    GetCommunityResponse: {
      community_view: components['schemas']['CommunityView']
      discussion_languages: number[]
      moderators: components['schemas']['CommunityModeratorView'][]
      site?: components['schemas']['Site']
    }
    ListCommunitiesResponse: {
      communities: components['schemas']['CommunityView'][]
      next_page?: string
    }
    FollowCommunityRequest: {
      community_id: number
      follow: boolean
    }
    CommunityResponse: {
      community_view: components['schemas']['CommunityView']
      discussion_languages: number[]
    }
    BlockCommunityRequest: {
      block: boolean
      community_id: number
    }
    BlockCommunityResponse: {
      community_view: components['schemas']['CommunityView']
      blocked: boolean
    }
    CreateCommunityRequest: {
      name: string
      title: string
      /** Format: url */
      banner_url?: string
      /** Format: markdown */
      description?: string
      discussion_languages?: number[]
      /** Format: url */
      icon_url?: string
      local_only?: boolean
      nsfw?: boolean
      restricted_to_mods?: boolean
      rules?: string
    }
    EditCommunityRequest: {
      community_id: number
      title?: string
      /** Format: url */
      banner_url?: string
      /** Format: markdown */
      description?: string
      discussion_languages?: number[]
      /** Format: url */
      icon_url?: string
      local_only?: boolean
      nsfw?: boolean
      restricted_to_mods?: boolean
      rules?: string
    }
    SubscribeCommunityRequest: {
      community_id: number
      subscribe: boolean
    }
    DeleteCommunityRequest: {
      community_id: number
      deleted: boolean
    }
    ModCommunityRequest: {
      added: boolean
      community_id: number
      person_id: number
    }
    ModCommunityResponse: {
      moderators: components['schemas']['CommunityModeratorView'][]
    }
    CommunityModerationBanItem: {
      banned_by?: components['schemas']['Person']
      banned_user?: components['schemas']['Person']
      community?: components['schemas']['Community']
      expired?: boolean
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z, null=permanent ban
       */
      expired_at?: string
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z, null=permanent ban
       */
      expires_at?: string
      reason?: string
    }
    CommunityModerationBansListResponse: {
      items?: components['schemas']['CommunityModerationBanItem'][]
      next_page?: string
    }
    CommunityModerationUnbanRequest: {
      community_id: number
      user_id: number
    }
    CommunityModerationBanRequest: {
      community_id: number
      reason: string
      user_id: number
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      expires_at?: string
      permanent?: boolean
    }
    CommunityModerationNsfwRequest: {
      post_id: number
      nsfw_status: boolean
    }
    CommunityFlairCreateRequest: {
      community_id: number
      flair_title: string
      /**
       * @description Hex color code for the text of the flair.
       * @default #000000
       * @example #000 or #000000
       */
      text_color: string
      /**
       * @description Hex color code for the background of the flair.
       * @default #DEDDDA
       * @example #fff or #FFFFFF
       */
      background_color: string
      /** @default false */
      blur_images: boolean
    }
    CommunityFlairCreateResponse: {
      id: number
      community_id: number
      flair_title: string
      /**
       * @description Hex color code for the text of the flair
       * @example #000000
       */
      text_color: string
      /**
       * @description Hex color code for the background of the flair
       * @example #DEDDDA
       */
      background_color: string
      blur_images: boolean
      /**
       * Format: url
       * @description Legacy tags that existed prior to 1.2 and some tags for remote communities might not have a defined ap_id
       */
      ap_id: string
    }
    CommunityFlairEditRequest: {
      flair_id: number
      flair_title?: string
      /**
       * @description Hex color code for the text of the flair.
       * @example #000 or #000000
       */
      text_color?: string
      /**
       * @description Hex color code for the background of the flair.
       * @example #fff or #FFFFFF
       */
      background_color?: string
      blur_images?: boolean
    }
    CommunityFlairEditResponse: {
      id: number
      community_id: number
      flair_title: string
      /**
       * @description Hex color code for the text of the flair
       * @example #000000
       */
      text_color: string
      /**
       * @description Hex color code for the background of the flair
       * @example #DEDDDA
       */
      background_color: string
      blur_images: boolean
      /**
       * Format: url
       * @description Legacy tags that existed prior to 1.2 and some tags for remote communities might not have a defined ap_id
       */
      ap_id: string
    }
    CommunityFlairDeleteRequest: {
      flair_id: number
    }
    CommunityFlairDeleteResponse: {
      community_view: components['schemas']['CommunityView']
      discussion_languages: number[]
      moderators: components['schemas']['CommunityModeratorView'][]
      site?: components['schemas']['Site']
    }
    FeedView: {
      /** Format: url */
      actor_id: string
      ap_domain: string
      children: components['schemas']['FeedView'][]
      communities: components['schemas']['Community'][]
      communities_count: number
      id: number
      is_instance_feed: boolean
      local: boolean
      name: string
      nsfl: boolean
      nsfw: boolean
      /** @description Is the authorized user the creator of the feed? */
      owner: boolean
      public: boolean
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      published: string
      show_posts_from_children: boolean
      subscribed: boolean
      subscriptions_count: number
      title: string
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      updated: string
      /** @description user_id of the feed creator/owner */
      user_id: number
      /** Format: url */
      banner?: string
      /** Format: markdown */
      description?: string
      /** Format: html */
      description_html?: string
      /** Format: url */
      icon?: string
      parent_feed_id?: number
    }
    FeedListResponse: {
      feeds: components['schemas']['FeedView'][]
    }
    TopicView: {
      children: components['schemas']['TopicView'][]
      communities: components['schemas']['Community'][]
      communities_count: number
      id: number
      name: string
      show_posts_from_children: boolean
      title: string
      parent_topic_id?: number
    }
    TopicListResponse: {
      topics: components['schemas']['TopicView'][]
    }
    GetUserResponse: {
      comments: components['schemas']['CommentView'][]
      moderates: components['schemas']['CommunityModeratorView'][]
      person_view: components['schemas']['PersonView']
      posts: components['schemas']['PostView'][]
      site?: components['schemas']['Site']
    }
    UserLoginRequest: {
      username: string
      password: string
    }
    UserLoginResponse: {
      jwt: string
    }
    UserUnreadCountsResponse: {
      /** @description Post and comment mentions */
      mentions: number
      private_messages: number
      /** @description Replies to posts and comments */
      replies: number
      /** @description Any other type of notification (reports, activity alerts, etc.) */
      other: number
    }
    CommentReply: {
      id: number
      comment_id: number
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      published: string
      read: boolean
      recipient_id: number
    }
    CommentReplyView: {
      activity_alert: boolean
      comment: components['schemas']['Comment']
      comment_reply: components['schemas']['CommentReply']
      community: components['schemas']['Community']
      counts: components['schemas']['CommentAggregates']
      creator: components['schemas']['Person']
      creator_banned_from_community: boolean
      creator_blocked: boolean
      creator_is_admin: boolean
      creator_is_moderator: boolean
      my_vote: number
      post: components['schemas']['Post']
      recipient: components['schemas']['Person']
      saved: boolean
      /** @enum {string} */
      subscribed: 'Subscribed' | 'NotSubscribed' | 'Pending'
    }
    UserRepliesResponse: {
      next_page: number
      replies: components['schemas']['CommentReplyView'][]
    }
    UserMentionsResponse: {
      next_page: number
      replies: components['schemas']['CommentReplyView'][]
    }
    UserBlockRequest: {
      block: boolean
      person_id: number
    }
    UserBlockResponse: {
      blocked: boolean
      person_view: components['schemas']['PersonView']
    }
    UserMarkAllReadResponse: {
      /** @description Should be empty list */
      replies: components['schemas']['CommentReplyView'][]
    }
    UserSubscribeRequest: {
      person_id: number
      subscribe: boolean
    }
    UserSubscribeResponse: {
      person_view: components['schemas']['PersonView']
      subscribed: boolean
    }
    UserSaveSettingsRequest: {
      /**
       * Format: url
       * @description Pass a null value to remove the image
       */
      avatar?: string
      /** Format: markdown */
      bio?: string
      /**
       * Format: url
       * @description Pass a null value to remove the image
       */
      cover?: string
      /** @enum {string} */
      default_comment_sort_type?: 'Hot' | 'Top' | 'New' | 'Old'
      /** @enum {string} */
      default_sort_type?: 'Hot' | 'Top' | 'New' | 'Active' | 'Old' | 'Scaled'
      show_nsfw?: boolean
      show_nsfl?: boolean
      show_read_posts?: boolean
    }
    UserSaveSettingsResponse: {
      my_user?: components['schemas']['MyUserInfo']
    }
    UserNotificationsCounts: {
      unread: number
      read: number
      total: number
    }
    UserNotificationItemView: {
      /** @description returned for all notif types */
      author: components['schemas']['Person']
      /** @description returned for all notif types */
      notif_body: string
      /** @description returned for all notif types */
      notif_id: number
      /** @description returned for all notif types */
      notif_subtype: string
      /** @description returned for all notif types */
      notif_type: number
      /**
       * @description returned for all notif types
       * @enum {string}
       */
      status: 'Unread' | 'Read'
      /** @description returned for notif_types: 3, 4, 6 (comment_mention subtype) */
      comment?: components['schemas']['Comment']
      /** @description returned for notif_types: 3, 4, 6 (comment_mention subtype) */
      comment_id?: number
      /** @description returned for notif_type 1 */
      community?: components['schemas']['Community']
      /** @description returned for notif_types: 0, 1, 2, 3, 4, 5, 6 (post_mention subtype) */
      post?: components['schemas']['PostView']
      /** @description returned for notif_types: 0, 1, 2, 3, 4, 5, 6 (post_mention subtype) */
      post_id?: number
    }
    UserNotificationsResponse: {
      counts: components['schemas']['UserNotificationsCounts']
      items: components['schemas']['UserNotificationItemView'][]
      /** @enum {string} */
      status: 'All' | 'Unread' | 'Read'
      username: string
      next_page: number
    }
    UserNotificationStateRequest: {
      notif_id: number
      /** @description true sets notification as read, false marks it unread */
      read_state: boolean
    }
    UserNotificationsCountResponse: {
      count: number
    }
    UserMarkAllNotifsReadResponse: {
      /** @example complete */
      mark_all_notifications_as_read: string
    }
    UserSetFlairRequest: {
      community_id: number
      /** @description Either omit or set to null to remove existing flair */
      flair_text?: string
    }
    UserSetFlairResponse: {
      person_view: components['schemas']['PersonView']
    }
    ListCommentsResponse: {
      comments: components['schemas']['CommentView'][]
      next_page?: string
    }
    LikeCommentRequest: {
      comment_id: number
      /**
       * @description -1 to downvote, 1 to upvote, 0 to revert previous vote
       * @example 1
       */
      score: number
      /**
       * @description private votes are not federated to other instances
       * @default false
       */
      private: boolean
    }
    GetCommentResponse: {
      comment_view: components['schemas']['CommentView']
    }
    SaveCommentRequest: {
      comment_id: number
      save: boolean
    }
    SubscribeCommentRequest: {
      comment_id: number
      subscribe: boolean
    }
    CreateCommentRequest: {
      body: string
      post_id: number
      parent_id?: number
      language_id?: number
    }
    EditCommentRequest: {
      body: string
      comment_id: number
      language_id?: number
      distinguished?: boolean
    }
    DeleteCommentRequest: {
      comment_id: number
      deleted: boolean
    }
    ReportCommentRequest: {
      comment_id: number
      reason: string
      description?: string
      /**
       * @description Also send report to originating instance
       * @default true
       */
      report_remote: boolean
    }
    CommentReport: {
      id: number
      creator_id: number
      comment_id: number
      original_comment_text: string
      reason?: string
      resolved: boolean
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      published: string
      /**
       * Format: datetime
       * @example 2025-06-07T02:29:07.980084Z
       */
      updated?: string
    }
    CommentReportView: {
      activity_alert: boolean
      banned_from_community: boolean
      comment: components['schemas']['Comment']
      community: components['schemas']['Community']
      counts: components['schemas']['CommentAggregates']
      creator: components['schemas']['Person']
      creator_banned_from_community: boolean
      creator_blocked: boolean
      creator_is_admin: boolean
      creator_is_moderator: boolean
      post: components['schemas']['Post']
      saved: boolean
      subscribed: string
      my_vote?: number
      can_auth_user_moderate?: boolean
      comment_report: components['schemas']['CommentReport']
      comment_creator: components['schemas']['Person']
    }
    GetCommentReportResponse: {
      comment_report_view: components['schemas']['CommentReportView']
    }
    RemoveCommentRequest: {
      comment_id: number
      removed: boolean
      reason?: string
    }
    MarkCommentAsReadRequest: {
      comment_reply_id: number
      read: boolean
    }
    GetCommentReplyResponse: {
      comment_reply_view: components['schemas']['CommentReplyView']
    }
    LockCommentRequest: {
      comment_id: number
      locked: boolean
    }
    CommentLikeView: {
      score: number
      creator_banned_from_community: boolean
      creator_banned: boolean
      creator: components['schemas']['Person']
    }
    ListCommentLikesResponse: {
      comment_likes?: components['schemas']['CommentLikeView'][]
      next_page?: string
    }
    ListPostsResponse: {
      posts: components['schemas']['PostView'][]
      next_page?: string
    }
    GetPostResponse: {
      post_view: components['schemas']['PostView']
      community_view?: components['schemas']['CommunityView']
      moderators?: components['schemas']['CommunityModeratorView'][]
      cross_posts?: components['schemas']['PostView'][]
    }
    PostReplyView: {
      activity_alert: boolean
      banned_from_community: boolean
      comment: components['schemas']['Comment']
      community?: components['schemas']['Community']
      counts: components['schemas']['CommentAggregates']
      creator: components['schemas']['Person']
      creator_banned_from_community: boolean
      creator_blocked: boolean
      creator_is_admin: boolean
      creator_is_moderator: boolean
      post?: components['schemas']['Post']
      saved: boolean
      subscribed: string
      my_vote?: number
      can_auth_user_moderate?: boolean
      replies?: components['schemas']['PostReplyView'][]
    }
    GetPostRepliesResponse: {
      comments?: components['schemas']['PostReplyView'][]
      next_page?: string
    }
    LikePostRequest: {
      post_id: number
      score: number
      private?: boolean
    }
    SavePostRequest: {
      post_id: number
      save: boolean
    }
    SubscribePostRequest: {
      post_id: number
      subscribe: boolean
    }
    CreatePostRequest: {
      title: string
      community_id: number
      body?: string
      /** Format: url */
      url?: string
      nsfw?: boolean
      language_id?: number
    }
    EditPostRequest: {
      post_id: number
      title?: string
      body?: string
      /** Format: url */
      url?: string
      nsfw?: boolean
      language_id?: number
    }
    DeletePostRequest: {
      post_id: number
      deleted: boolean
    }
    ReportPostRequest: {
      post_id: number
      reason: string
    }
    PostReport: {
      id: number
      creator_id: number
      post_id: number
      original_post_name: string
      original_post_body: string
      reason: string
      resolved: boolean
      published: string
    }
    PostReportView: {
      post_report: components['schemas']['PostReport']
      post: components['schemas']['Post']
      community: components['schemas']['Community']
      creator: components['schemas']['Person']
      post_creator: components['schemas']['Person']
      counts: components['schemas']['PostAggregates']
      creator_banned_from_community: boolean
      creator_is_moderator: boolean
      creator_is_admin: boolean
      creator_blocked: boolean
      /** @enum {string} */
      subscribed: 'Subscribed' | 'NotSubscribed' | 'Pending'
      saved: boolean
    }
    PostReportResponse: {
      post_report_view: components['schemas']['PostReportView']
    }
    LockPostRequest: {
      post_id: number
      locked: boolean
    }
    FeaturePostRequest: {
      post_id: number
      featured: boolean
      feature_type: string
    }
    RemovePostRequest: {
      post_id: number
      removed: boolean
      reason?: string
    }
    MarkPostAsReadRequest: {
      read: boolean
      post_id?: number
      post_ids?: number[]
    }
    SuccessResponse: {
      success: boolean
    }
    PostLikeView: {
      score: number
      creator_banned_from_community: boolean
      creator_banned: boolean
      creator: components['schemas']['Person']
    }
    ListPostLikesResponse: {
      post_likes?: components['schemas']['PostLikeView'][]
      next_page?: string
    }
    PostSetFlairRequest: {
      post_id: number
      /** @description A list of all the flair id to assign to the post. Either pass an empty list or null to remove flair */
      flair_id_list?: number[]
    }
    PostSetFlairResponse: {
      banned_from_community: boolean
      community: components['schemas']['Community']
      counts: components['schemas']['PostAggregates']
      creator: components['schemas']['Person']
      creator_banned_from_community: boolean
      creator_is_admin: boolean
      creator_is_moderator: boolean
      hidden: boolean
      post: components['schemas']['Post']
      read: boolean
      saved: boolean
      /** @enum {string} */
      subscribed: 'Subscribed' | 'NotSubscribed' | 'Pending'
      unread_comments: number
      activity_alert?: boolean
      my_vote?: number
      flair_list?: components['schemas']['CommunityFlair'][]
    }
    ImageUploadRequest: {
      /** Format: binary */
      file: string
    }
    ImageUploadResponse: {
      /** Format: url */
      url: string
      liked_only?: boolean
      saved_only?: boolean
      q?: string
    }
  }
  responses: {
    /** @description Unprocessable Content */
    UNPROCESSABLE_CONTENT: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': components['schemas']['Error']
      }
    }
  }
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export type operations = Record<string, never>
